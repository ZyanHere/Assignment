{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file://G%3A/lastminutedeal/lmdfrontend/src/app/api/auth/%5B...nextauth%5D/route.js"],"sourcesContent":["import axios from \"axios\";\r\nimport NextAuth from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport GoogleProvider from \"next-auth/providers/google\";\r\nimport FacebookProvider from \"next-auth/providers/facebook\";\r\n\r\nexport const authOptions = {\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID || \"\",\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\r\n      authorization: {\r\n        params: {\r\n          prompt: \"consent\",\r\n          access_type: \"offline\",\r\n          response_type: \"code\",\r\n          redirect_uri: process.env.NEXTAUTH_URL + \"/api/auth/callback/google\"\r\n        }\r\n      }\r\n    }),\r\n    FacebookProvider({\r\n      clientId: process.env.FACEBOOK_CLIENT_ID || \"\",\r\n      clientSecret: process.env.FACEBOOK_CLIENT_SECRET || \"\",\r\n      authorization: {\r\n        params: {\r\n          redirect_uri: process.env.NEXTAUTH_URL + \"/api/auth/callback/facebook\"\r\n        }\r\n      }\r\n    }),\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\", optional: true },\r\n        phone: { label: \"Phone\", type: \"text\", optional: true },\r\n        password: { label: \"Password\", type: \"password\" }\r\n      },\r\n      async authorize(credentials) {\r\n        // Hardcoded user for development\r\n        if (\r\n          (credentials.phone === \"6001234567\" || credentials.email === \"zyan@local.com\") &&\r\n          credentials.password === \"zyanhere\"\r\n        ) {\r\n          return {\r\n            id: \"dev-user\",\r\n            name: \"Zyan\",\r\n            phone: \"6001234567\",\r\n            email: \"zyan@local.com\",\r\n            role: \"admin\"\r\n          };\r\n        }\r\n        \r\n        // Validate that either email or phone is provided\r\n        if (!credentials.email && !credentials.phone) {\r\n          throw new Error(\"Email or phone number is required\");\r\n        }\r\n\r\n        try {\r\n          // Prepare login data based on what's provided\r\n          const loginData = {\r\n            password: credentials.password,\r\n          };\r\n\r\n          if (credentials.email) {\r\n            loginData.email = credentials.email;\r\n          }\r\n          if (credentials.phone) {\r\n            loginData.phone = credentials.phone;\r\n          }\r\n\r\n          console.log(\"Attempting login with:\", { \r\n            email: credentials.email || \"not provided\", \r\n            phone: credentials.phone || \"not provided\",\r\n            password: \"***\" \r\n          });\r\n\r\n          const res = await axios.post(\r\n            \"http://localhost:4000/lmd/api/v1/auth/customer/login\",\r\n            loginData,\r\n            { \r\n              headers: {\r\n                'Content-Type': 'application/json'\r\n              },\r\n              timeout: 10000\r\n            }\r\n          );\r\n          \r\n          console.log(\"Login response:\", res.data);\r\n          \r\n          // Check if the response has the expected structure\r\n          if (res.data && res.data.user) {\r\n            return res.data.user;\r\n          } else if (res.data && res.data.message) {\r\n            throw new Error(res.data.message);\r\n          } else {\r\n            throw new Error(\"Invalid response format from server\");\r\n          }\r\n        } catch (err) {\r\n          console.error(\"Login failed:\", err.response?.data || err.message);\r\n          \r\n          // Handle different types of errors\r\n          if (err.response?.data?.message) {\r\n            throw new Error(err.response.data.message);\r\n          } else if (err.response?.status === 400) {\r\n            throw new Error(\"Invalid credentials\");\r\n          } else if (err.response?.status === 404) {\r\n            throw new Error(\"User not found\");\r\n          } else if (err.response?.status >= 500) {\r\n            throw new Error(\"Server error. Please try again later.\");\r\n          } else if (err.code === 'ECONNREFUSED') {\r\n            throw new Error(\"Cannot connect to server. Please check if the backend is running.\");\r\n          } else if (err.code === 'ETIMEDOUT') {\r\n            throw new Error(\"Request timeout. Please try again.\");\r\n          } else {\r\n            throw new Error(\"Login failed. Please check your credentials.\");\r\n          }\r\n        }\r\n      }\r\n    })\r\n  ],\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n  callbacks: {\r\n    async jwt({ token, user, account }) {\r\n      // Handle OAuth providers - store the account info for later use\r\n      if (account?.provider === \"google\" || account?.provider === \"facebook\") {\r\n        // Store OAuth account info in token for session callback\r\n        token.oauthAccount = {\r\n          provider: account.provider,\r\n          access_token: account.access_token,\r\n          email: token.email,\r\n          name: token.name\r\n        };\r\n      } else if (user) {\r\n        // Handle credentials login\r\n        token.user = {\r\n          id: user.id || user._id,\r\n          name: user.name || `${user.firstName} ${user.lastName}`,\r\n          email: user.email,\r\n          phone: user.phone,\r\n          role: user.role || \"user\"\r\n        };\r\n      }\r\n      return token;\r\n    },\r\n\r\n    async session({ session, token }) {\r\n      if (token.user) {\r\n        session.user = token.user;\r\n      } else if (token.oauthAccount) {\r\n        // For OAuth users, we'll need to handle this differently\r\n        // You might want to redirect them to complete their profile\r\n        session.user = {\r\n          id: token.sub,\r\n          name: token.name,\r\n          email: token.email,\r\n          provider: token.oauthAccount.provider\r\n        };\r\n      }\r\n      return session;\r\n    }\r\n  },\r\n  pages: {\r\n    signIn: \"/auth/login\",\r\n  },\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n  debug: process.env.NODE_ENV === 'development',\r\n};\r\n\r\nconst handler = NextAuth(authOptions);\r\n\r\nexport { handler as GET, handler as POST }; "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 354, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}